<project name="WeixinXiaodaoit" default="release-jar" basedir=".">
  <property file="build.properties" />

  <!-- Global properties for this build -->
  <property name="jar.name" value="WeixinXiaodaoit" />
  <property name="version" value="1.0.0" />
  <property name="package.name"  value="${jar.name}-${version}" />
  <property name="webapp.name" value="WeixinXiaodaoit" /> 

  <!-- Directories -->
  <property name="build.dir" location="build" />
  <property name="build.cache.dir" location="${build.dir}/cache" />
  <property name="build.lib.dir" location="${build.dir}/lib" />
  <property name="javadoc.dir" location="javadoc" />
  <property name="dist.dir"  location="dist" />
  <property name="dist.java.dir"  location="${dist.jar}/java" />
  <property name="package.dir"  location="${dist.dir}/${package.name}" />
  <property name="tar.file" location="${dist.dir}/${jar.name}-${version}.tar.gz" />
  <property name="dist.python.dir"  location="${dist.jar}/python" />
  <property name="webapp.dir" value="${build.dir}/${webapp.name}" /> 

  <property name="jar.file" location="${build.dir}/${package.name}.jar"/>
  <property name="jar.test.file" location="${build.dir}/${jar.name}-test-${version}.jar"/>
  <property name="jar.nodep.file" location="${build.dir}/${package.name}-nodep.jar"/>


  <property name="src.dir" location="src" />
  <property name="java.src.dir" location="${src.dir}" />
  <property name="python.src.dir" location="python" />
  <property name="test.src.dir" location="${src.dir}/test" />  
  <property name="classes.dir" location="${build.dir}/classes" />


  <property name="data.dir" location="data" />
  <property name="test.data.dir" location="${test.src.dir}/data" />

  <property name="lib.dir" value="${basedir}/WebRoot/WEB-INF/lib"/>

  <property name="bin.dir" value="${basedir}/bin"/>

  <property name="test.lib.dir" value="${lib.dir}"/>
  <property name="test.build.dir" value="${build.dir}/test"/>  
  <property name="test.generated.dir" value="${test.build.dir}/src"/>
  <property name="test.build.data" value="${test.build.dir}/data"/>
  <property name="test.log.dir" value="${test.build.dir}/logs"/>
  <property name="test.build.classes" value="${test.build.dir}/classes"/>

  <property name="test.include" value="Test*"/>
  <property name="test.classpath.id" value="test.classpath"/>
  <property name="test.output" value="no"/>
  <property name="test.timeout" value="900000"/>

  <property name="test.junit.output.format" value="plain"/>
  <property name="test.junit.printsummary" value="yes" />
  <property name="test.junit.fork.mode" value="perTest" />
  <property name="test.junit.haltonfailure" value="no" />
  <property name="test.junit.maxmemory" value="512m" />

  <path id="test.classpath">
      <pathelement location="${classes.dir}"/>
      <pathelement location="${test.build.classes}"/>
      <pathelement location="${basedir}/bin"/>
      <fileset dir="${test.lib.dir}">
          <include name="**/*.jar"/>
      </fileset>
      <pathelement location="${build.lib.dir}"/>
      <pathelement location="${data.dir}"/>
  </path>

  <target name="debug" description="sets properties for debugging (logging on, debug symbols, etc)">
	<echo message="Building in debug mode..."/>
	<property name="compile.mode" value="debug"/>
	<property name="java.debug" value="true"/>
  </target>

  <target name="release" description="sets properties for release builds.">
	<echo message="Building in release mode..."/>
	<property name="compile.mode" value="release"/>
	<property name="java.debug" value="false"/>
  </target>

  <target name="init">
    <tstamp/>
    <!-- Create the build directory structure used by compile -->
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
    <mkdir dir="${test.build.dir}" />
  </target>

  <macrodef name="compile-source">
   <sequential>
    <!-- Compile the java code from ${src.java} into ${build} -->
    <javac srcdir="${java.src.dir}" destdir="${classes.dir}" debug="${java.debug}" debuglevel="lines,vars,source">
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javac>
   </sequential>
  </macrodef>


  <target name="compile-source-only" depends="init" description="compile the source">
    <compile-source />
  </target>


  <target name="compile" depends="init" description="compile the source">
    <compile-source />
  </target>

  <target name="jar" depends="compile">
    <delete file="${jar.file}"/>
    <jar jarfile="${jar.file}">
      <fileset dir="${classes.dir}"/>
    </jar>
  </target>

  <target name="jar-test" depends="compile-java-tests">
    <delete file="${jar.test.file}"/>
    <jar jarfile="${jar.test.file}">
      <fileset dir="${test.build.classes}"/>
    </jar>
  </target>

  <target name="jar-all" depends="jar, jar-test">
  </target>

  <!-- Merge external compile dependencies as external-libs so it can be merged with build classes using a nice filter. -->
  <target name="mergeexternal" depends="jar" description="generate the external fat jar">
    <jar destfile="${build.dir}/external-libs.jar">
      <zipgroupfileset dir="${lib.dir}">
        <include name="*.jar"/>
     </zipgroupfileset>
    </jar>
  </target>

  <!-- fat jaring using external + classes/ generated by this build -->
  <!-- Filtering others Manifest file-->
  <target name="fatjar" depends="mergeexternal" description="generate the fat jar">        
    <jar destfile="${jar.nodep.file}" filesetmanifest="mergewithoutmain">
        <manifest>
            <attribute name="Class-Path" value="."/>
        </manifest>
        <fileset dir="${classes.dir}"/>
        <zipfileset src="${build.dir}/external-libs.jar">         
	  <exclude name="META-INF/*.SF" />
	  <exclude name="META-INF/*.MF" />
        </zipfileset>
    </jar>
  </target>
	
	<target name="war" depends="clean, jar">
	    <mkdir dir="${webapp.dir}"/>

	    <copy todir="${webapp.dir}">
	      <fileset file="${build.dir}/${jar.name}-${version}.jar"/>
	    </copy>
				
		<copy todir="${webapp.dir}/WEB-INF/lib" file="${jar.file}" >
		</copy>
		
	    <copy todir="${webapp.dir}" includeEmptyDirs="true">
	      <fileset dir="${basedir}/WebRoot">
	        <include name="**/*" />
	      </fileset>
	    </copy>
	
	  </target>


  <target name="package" depends="clean, jar">
    <mkdir dir="${package.dir}"/>
    <mkdir dir="${package.dir}/bin"/>
    <mkdir dir="${package.dir}/lib"/>
    <mkdir dir="${package.dir}/script"/>
    <mkdir dir="${package.dir}/data"/>
    <mkdir dir="${package.dir}/src"/>
    <mkdir dir="${package.dir}/python"/>
    <copy todir="${package.dir}">
      <fileset file="${build.dir}/${jar.name}-${version}.jar"/>
    </copy>

    <copy todir="${package.dir}/bin" includeEmptyDirs="true">
      <fileset dir="bin">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/lib" includeEmptyDirs="false">
      <fileset dir="${lib.dir}">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/script" includeEmptyDirs="true">
      <fileset dir="script">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/data" includeEmptyDirs="true">
      <fileset dir="${data.dir}">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/src" includeEmptyDirs="true">
      <fileset dir="src">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/python" includeEmptyDirs="true">
      <fileset dir="python">
        <include name="**/*" />
      </fileset>
    </copy>

    <copy todir="${package.dir}/" file="build.xml"/>

  </target>

  <target name="tar" depends="package" description="Create release tarball">
    <tar compression="gzip" longfile="gnu" destfile="${tar.file}">
      <tarfileset dir="${package.dir}" mode="664" prefix="${package.name}">
        <exclude name="bin/*" />
        <exclude name="script/*" />
        <exclude name="**/*.sh" />
        <include name="**" />
      </tarfileset>
      <tarfileset dir="${package.dir}" mode="755" prefix="${package.name}">
        <include name="bin/*" />
        <include name="script/*" />
        <include name="**/*.sh" />
        <include name="**/setup.py" />
      </tarfileset>
    </tar>
    <delete dir="${package.dir}" />
  </target>
  
  <target name="javadoc" depends="compile" description="generate documentation" >
    <delete dir="${javadoc.dir}" />
    <javadoc destdir="${javadoc.dir}">
      <fileset dir="${java.src.dir}" />
      <fileset dir="${gen.java.src.dir}" />
      <classpath>
        <fileset dir="${lib.dir}">
          <include name="**/*.jar"/>
        </fileset>
      </classpath>
    </javadoc>
  </target>

  <target name="debug-jar" description="Build debug and jar" depends="debug,jar"/>
  <target name="release-jar" description="Build release and jar" depends="release,jar"/>

  <target name="python-clean">
    <echo message="start to run python clean" />
    <sequential>
      <exec executable="python" failonerror="true">
        <arg value="${python.src.dir}/setup.py" />
        <arg value="clean" />
      </exec>
    </sequential>
  </target>

  <target name="clean"  description="clean up">
    <!-- Delete the ${build} and ${dist} directory trees -->
    <delete dir="${build.dir}"/>
    <delete dir="${classes.dir}" />
    <delete dir="${dist.dir}"/>
  </target>

  <target name="compile-java-tests" depends="compile" >
    <echo message="classes dir: ${classes.dir}" /> 
	<delete dir="${test.build.classes}"/>
    <mkdir dir="${test.build.classes}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.build.classes}" deprecation="on" debug="${java.debug}" debuglevel="lines,vars,source">
      <classpath refid="${test.classpath.id}"/>
      <include name="**/*.java" />
    </javac>
  </target>

  <target name="python-test" depends="init">
    <echo message="start to run python test" />
    <sequential>
      <exec executable="python" failonerror="true">
        <arg value="${python.src.dir}/setup.py" />
        <arg value="test" />
      </exec>
    </sequential>
  </target>
  
  <target name="test" depends="compile-java-tests" 
                      description="Run unit tests">

    <delete dir="${test.log.dir}"/>
    <mkdir dir="${test.log.dir}"/>
    <junit showoutput="${test.output}"
      printsummary="${test.junit.printsummary}"
      haltonfailure="${test.junit.haltonfailure}"
      fork="yes"
      forkmode="${test.junit.fork.mode}"
      maxmemory="${test.junit.maxmemory}"
      dir="${basedir}" timeout="${test.timeout}"
      errorProperty="tests.failed" failureProperty="tests.failed">
      <!-- <sysproperty key="java.library.path" value="${java.library.path}" /> -->
      <sysproperty key="java.library.path" value="${java.library.path}:/usr/lib:/usr/local/lib:${build.lib.dir}" />
      <sysproperty key="test.data.dir" value="${test.data.dir}" />
      <sysproperty key="test.build.data" value="${test.build.data}"/>
      <sysproperty key="test.cache.data" value="${test.cache.data}"/>
      <sysproperty key="test.debug.data" value="${test.debug.data}"/>
      <sysproperty key="test.log.dir" value="${test.log.dir}"/>
      <sysproperty key="test.source.dir" value="${test.src.dir}"/>
      <sysproperty key="test.build.extraconf" value="${test.build.extraconf}" />
      <classpath refid="${test.classpath.id}"/>
      <formatter type="${test.junit.output.format}" />
      <batchtest todir="${test.log.dir}" unless="testcase">
        <fileset dir="${test.src.dir}"
         includes="**/${test.include}.java"
         excludes="**/${test.exclude}.java" />
      </batchtest>
      <batchtest todir="${test.log.dir}" if="testcase">
        <fileset dir="${test.src.dir}" includes="**/${testcase}.java"/>
      </batchtest>
    </junit>
    <fail if="tests.failed">Tests failed!</fail>
  </target>
</project>

